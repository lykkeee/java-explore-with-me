{
	"info": {
		"_postman_id": "39823deb-2e99-45ee-b18d-91650fc3ec27",
		"name": "Test Explore With Me - Comments and Rates",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27660118"
	},
	"item": [
		{
			"name": "Comments",
			"item": [
				{
					"name": "Comment create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"pm.test(\"Has comment create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test comment 'author' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('author');\r",
									"    pm.expect(jsonData.author, '\"author\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment 'event' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event, '\"event\" must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment 'text' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('text');\r",
									"    pm.expect(jsonData.text, '\"text\" must be \"This is a comment\"').to.eql('This is a comment');\r",
									"});\r",
									"pm.test(\"Test comment 'edited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('edited');\r",
									"    pm.expect(jsonData.edited, '\"edited\" field must be \"false\"').to.eql(false);    \r",
									"});\r",
									"pm.test(\"Test comment 'created' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('created');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"This is a comment\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/1/comments?eventId=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"1",
								"comments"
							],
							"query": [
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment fail text create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/1/comments?eventId=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"1",
								"comments"
							],
							"query": [
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment fail user create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"This is a comment\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/500/comments?eventId=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"500",
								"comments"
							],
							"query": [
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment fail event create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"This is a comment\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/1/comments?eventId=500",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"1",
								"comments"
							],
							"query": [
								{
									"key": "eventId",
									"value": "500"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment edit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"pm.test(\"Has comment create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test comment 'author' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('author');\r",
									"    pm.expect(jsonData.author, '\"author\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment 'event' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event, '\"event\" must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment 'text' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('text');\r",
									"    pm.expect(jsonData.text, '\"text\" must be \"This is a new comment\"').to.eql('This is a new comment');\r",
									"});\r",
									"pm.test(\"Test comment 'edited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('edited');\r",
									"    pm.expect(jsonData.edited, '\"edited\" field must be \"true\"').to.eql(true);    \r",
									"});\r",
									"pm.test(\"Test comment 'created' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('created');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"This is a new comment\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/1/comments?commentId=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"1",
								"comments"
							],
							"query": [
								{
									"key": "commentId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment fail id edit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"This is a new comment\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/1/comments?commentId=2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"1",
								"comments"
							],
							"query": [
								{
									"key": "commentId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"pm.test(\"Has comment get response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test comment 'author' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('author');\r",
									"    pm.expect(jsonData.author, '\"author\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment 'event' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event, '\"event\" must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment 'text' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('text');\r",
									"    pm.expect(jsonData.text, '\"text\" must be \"This is a new comment\"').to.eql('This is a new comment');\r",
									"});\r",
									"pm.test(\"Test comment 'edited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('edited');\r",
									"    pm.expect(jsonData.edited, '\"edited\" field must be \"true\"').to.eql(true);    \r",
									"});\r",
									"pm.test(\"Test comment 'created' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('created');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/comments?commentId=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments"
							],
							"query": [
								{
									"key": "commentId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment get fail id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/comments?commentId=2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments"
							],
							"query": [
								{
									"key": "commentId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"pm.test(\"Has comment create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test comment 'author' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('author');\r",
									"    pm.expect(jsonData.author, '\"author\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test comment 'event' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event, '\"event\" must be \"2\"').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test comment 'text' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('text');\r",
									"    pm.expect(jsonData.text, '\"text\" must be \"This is a comment #2\"').to.eql('This is a comment #2');\r",
									"});\r",
									"pm.test(\"Test comment 'edited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('edited');\r",
									"    pm.expect(jsonData.edited, '\"edited\" field must be \"false\"').to.eql(false);    \r",
									"});\r",
									"pm.test(\"Test comment 'created' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('created');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"This is a comment #2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/2/comments?eventId=2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"2",
								"comments"
							],
							"query": [
								{
									"key": "eventId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment get all by user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Test list user response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('author');\r",
									"    pm.expect(jsonData[0].author, '\"author\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test user[0] 'event' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('event');\r",
									"    pm.expect(jsonData[0].event, '\"event\" must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test user[0] 'text' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('text');\r",
									"    pm.expect(jsonData[0].text, '\"text\" must be \"This is a new comment\"').to.eql('This is a new comment');\r",
									"});\r",
									"pm.test(\"Test user[0] 'edited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('edited');\r",
									"    pm.expect(jsonData[0].edited, '\"edited\" field must be \"true\"').to.eql(true);    \r",
									"});\r",
									"pm.test(\"Test user[0] 'created' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('created');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/comments/users/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment get all by event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Test list user response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('author');\r",
									"    pm.expect(jsonData[0].author, '\"author\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test user[0] 'event' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('event');\r",
									"    pm.expect(jsonData[0].event, '\"event\" must be \"2\"').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test user[0] 'text' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('text');\r",
									"    pm.expect(jsonData[0].text, '\"text\" must be \"This is a comment #2\"').to.eql('This is a comment #2');\r",
									"});\r",
									"pm.test(\"Test user[0] 'edited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('edited');\r",
									"    pm.expect(jsonData[0].edited, '\"edited\" field must be \"false\"').to.eql(false);    \r",
									"});\r",
									"pm.test(\"Test user[0] 'created' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('created');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/comments/events/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"events",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment delete fail id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/1/comments?commentId=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"1",
								"comments"
							],
							"query": [
								{
									"key": "commentId",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment delete fail user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/1/comments?commentId=2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"1",
								"comments"
							],
							"query": [
								{
									"key": "commentId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([204]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/1/comments?commentId=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"1",
								"comments"
							],
							"query": [
								{
									"key": "commentId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment delete by admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([204]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/comments/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"comments",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Rates",
			"item": [
				{
					"name": "Rate create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"pm.test(\"Has rate create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test rate 'user' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user, '\"user\" must be 1').to.eql(13);\r",
									"});\r",
									"pm.test(\"Test rate 'event' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event, '\"event\" must be \"1\"').to.eql(5);\r",
									"});\r",
									"pm.test(\"Test rate 'rate' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('rate');\r",
									"    pm.expect(jsonData.rate, '\"rate\" must be \"5\"').to.eql(5);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"rate\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/13/rates?eventId=5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"13",
								"rates"
							],
							"query": [
								{
									"key": "eventId",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Rate fail rate create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"rate\": 6\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/13/rates?eventId=5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"13",
								"rates"
							],
							"query": [
								{
									"key": "eventId",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Rate fail participant create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"rate\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/2/rates?eventId=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"2",
								"rates"
							],
							"query": [
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment fail user create Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"This is a comment\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/500/comments?eventId=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"500",
								"comments"
							],
							"query": [
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Rate get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"pm.test(\"Has rate get response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/rates/5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"rates",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Rate change",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 20\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"pm.test(\"Has rate create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test rate 'user' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user, '\"user\" must be 1').to.eql(13);\r",
									"});\r",
									"pm.test(\"Test rate 'event' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event, '\"event\" must be \"1\"').to.eql(5);\r",
									"});\r",
									"pm.test(\"Test rate 'rate' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('rate');\r",
									"    pm.expect(jsonData.rate, '\"rate\" must be \"4\"').to.eql(4);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"rate\": 4\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/13/rates?rateId=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"13",
								"rates"
							],
							"query": [
								{
									"key": "rateId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Rate delete fail user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/2/rates?rateId=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"2",
								"rates"
							],
							"query": [
								{
									"key": "rateId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Rate delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([204]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/13/rates?rateId=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"13",
								"rates"
							],
							"query": [
								{
									"key": "rateId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}